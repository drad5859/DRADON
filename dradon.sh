#!/bin/bash


echo "==========================================="
echo "  MADE BY DRADE - DRADON"
echo "==========================================="
echo -e "                                                                                     
                                                            ,----..             ,--. 
    ,---,     ,-.----.       ,---,            ,---,        /   /   \\          ,--.'| 
  .'  .' \`\\   \\    /  \\     '  .' \\         .'  .' \`\\     /   .     :     ,--,:  : | 
,---.'     \\  ;   :    \\   /  ;    '.     ,---.'     \\   .   /   ;.  \\ ,\`--.'\`|  ' : 
|   |  .\`\\  | |   | .\\ :  :  :       \\    |   |  .\`\\  | .   ;   /  \` ; |   :  :  | | 
:   : |  '  | .   : |: |  :  |   /\\   \\   :   : |  '  | ;   |  ; \\ ; | :   |   \\ | : 
|   ' '  ;  : |   |  \\ :  |  :  ' ;.   :  |   ' '  ;  : |   :  | ; | ' |   : '  '; | 
'   | ;  .  | |   : .  /  |  |  ;/  \\   \\ '   | ;  .  | .   |  ' ' ' : '   ' ;.    ; 
|   | :  |  ' ;   | |  \\  '  :  | \\  \\ ,' |   | :  |  ' '   ;  \\; /  | |   | | \\   | 
'   : | /  ;  |   | ;\\  \\ |  |  '  '--'   '   : | /  ;   \\   \\  ',  /  '   : |  ; .' 
|   | \`' ,/   :   ' | \\\'. |  :  :         |   | \`' ,/     ;   :    /   |   | \`--'   
;   :  .'     :   : :-'   |  | ,'         ;   :  .'        \\   \\ .'    '   : |       
|   ,.'       |   |.'     \`--''           |   ,.'           \`---\`      ;   |.'       
'---'         \`---'                       '---'                        '---'         
                                                                                     
"

required_tools=("curl" "grep" "sed" "awk" "whatweb" "ffuf" "sslscan" "assetfinder")
for tool in "${required_tools[@]}"; do
    if ! command -v "$tool" &>/dev/null; then
        echo "[!] Error: $tool is not installed. Please install it and try again."
        exit 1
    fi
done


create_report_file() {
    local filename="report_$(date +%Y%m%d_%H%M%S).txt"
    touch "$filename"
    echo "===========================================" >> "$filename"
    echo "  MADE BY DRADE - Deep and Sensitive Info Discovery Report" >> "$filename"
    echo "===========================================" >> "$filename"
    echo "Target Domain: $target_domain" >> "$filename"
    echo "Target URL: $target_url" >> "$filename"
    echo "Date: $(date)" >> "$filename"
    echo "===========================================" >> "$filename"
    echo "" >> "$filename"
    echo "Report generated by the tool." >> "$filename"
    echo "" >> "$filename"
    echo "===========================================" >> "$filename"
    echo "" >> "$filename"
    echo "$filename"
}

add_section_to_report() {
    local filename=$1
    local section_title=$2
    echo "===========================================" >> "$filename"
    echo " $section_title" >> "$filename"
    echo "===========================================" >> "$filename"
    echo "" >> "$filename"
}

enumerate_subdomains() {
    local domain=$1
    local report_file=$2
    add_section_to_report "$report_file" "Subdomain Enumeration"
    echo "[+] Enumerating subdomains for: $domain"
    subfinder -d "$domain" -silent > subdomains.txt
    assetfinder --subs-only "$domain" >> subdomains.txt
    sort -u subdomains.txt -o subdomains.txt
    cat subdomains.txt >> "$report_file"
    echo "Subdomains found:" >> "$report_file"
    echo "" >> "$report_file"
    cat subdomains.txt >> "$report_file"
}

identify_technologies() {
    local target_url=$1
    local report_file=$2
    add_section_to_report "$report_file" "Technology Identification"
    echo "[+] Identifying technologies used by: $target_url"
    whatweb "$target_url" --log-verbose=technologies.txt
    cat technologies.txt >> "$report_file"
}

analyze_headers() {
    local target_url=$1
    local report_file=$2
    add_section_to_report "$report_file" "HTTP Header Analysis"
    echo "[+] Analyzing HTTP headers for: $target_url"
    curl -s -I "$target_url" > headers.txt
    cat headers.txt >> "$report_file"
}

scan_ssl_tls() {
    local target_domain=$1
    local report_file=$2
    add_section_to_report "$report_file" "SSL/TLS Configuration Analysis"
    echo "[+] Scanning SSL/TLS configuration for: $target_domain"
    sslscan --no-failed "$target_domain" > sslscan_results.txt
    cat sslscan_results.txt >> "$report_file"
}

bruteforce_directories() {
    local target_url=$1
    local wordlist=$2
    local report_file=$3
    add_section_to_report "$report_file" "Directory and File Bruteforcing"
    echo "[+] Bruteforcing directories and files on: $target_url"
    ffuf -u "$target_url/FUZZ" -w "$wordlist" -of md -o ffuf_results.md
    cat ffuf_results.md >> "$report_file"
}

extract_comments_hidden_fields() {
    local target_url=$1
    local report_file=$2
    add_section_to_report "$report_file" "HTML Comments and Hidden Fields"
    echo "[+] Extracting comments and hidden fields from: $target_url"
    curl -s "$target_url" | grep -E "<!--|<input.*type=['\"]hidden['\"]" > hidden_info.txt
    cat hidden_info.txt >> "$report_file"
}

fetch_sensitive_files() {
    local target_url=$1
    local report_file=$2
    add_section_to_report "$report_file" "Sensitive File Detection"
    sensitive_files=(".git/config" ".env" ".htaccess" ".DS_Store" "backup.sql" "config.php.bak" "wp-config.php")
    echo "[+] Checking for sensitive files on: $target_url"
    for file in "${sensitive_files[@]}"; do
        url="$target_url/$file"
        response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
        if [ "$response" = "200" ]; then
            echo "[!] Found: $url (HTTP Status: $response)" >> "$report_file"
        fi
    done
}

# Main script logic
print_header() {
    echo -e "\n==========================================="
    echo -e " $1"
    echo -e "===========================================\n"
}

print_header "Deep and Sensitive Info Discovery Tool"
read -p "Enter the target domain (e.g., example.com): " target_domain
read -p "Enter the target URL (e.g., https://example.com): " target_url
read -p "Enter the path to the directory/file bruteforcing wordlist (e.g., common.txt): " wordlist

# Validate input
if [ -z "$target_domain" ] || [ -z "$target_url" ] || [ -z "$wordlist" ]; then
    echo "[!] All fields are required."
    exit 1
fi

report_file=$(create_report_file)

enumerate_subdomains "$target_domain" "$report_file"

identify_technologies "$target_url" "$report_file"

analyze_headers "$target_url" "$report_file"

scan_ssl_tls "$target_domain" "$report_file"

bruteforce_directories "$target_url" "$wordlist" "$report_file"

extract_comments_hidden_fields "$target_url" "$report_file"

fetch_sensitive_files "$target_url" "$report_file"

echo "==========================================="
echo " Deep and Sensitive Information Discovery Complete!"
echo "==========================================="
echo "Results saved in: $report_file"
